)
)
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
library(dplyr)
select(filmdeathcounts) %% filter(filmdeathcounts$Film == "Leon")
select(filmdeathcounts) %% filter(filmdeathcounts$Film = "Leon")
select(filmdeathcounts) %>% filter(filmdeathcounts$Film = "Leon")
select(filmdeathcounts) %>% filter(filmdeathcounts$Film == "Leon")
filmdeathcounts$Film
select(filmdeathcounts) %>% filter(filmdeathcounts$Film == "Waterworld")
film <- select(filmdeathcounts) %>% filter(filmdeathcounts$Film == "Waterworld")
film
show(film)
filmdeathcounts %<% select(filmdeathcounts) %>% filter(filmdeathcounts$Film == "Waterworld")
filmdeathcounts %>% select(filmdeathcounts) %>% filter(filmdeathcounts$Film == "Waterworld")
filmdeathcounts %>% select(filmdeathcounts$Year) %>% filter(filmdeathcounts$Film == "Waterworld")
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
tytul_filmu <- filmdeathcounts$Film[1]
tytul_filmu
tytul_filmu <- filmdeathcounts$Film[3]
tytul_filmu
filmdeathcounts %>% select(filmdeathcounts) %>% filter(filmdeathcounts$Film == tytul_filmu)
filmdeathcounts %>% select() %>% filter(filmdeathcounts$Film == tytul_filmu)
pierwszy <- filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu)
pierwszy
pierwszy <- filter(filmdeathcounts$Body_Count, filmdeathcounts$Film == tytul_filmu)
pierwszy <- filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu, filmdeathcounts$Body_Count)
pierwszy
pierwszy <- filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu)
pierwszy$Body_Count
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
hist(tytul_filmu$Body_Count, breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
hist(c(Body_Count:0], breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
hist(c(Body_Count:0], breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(c(Body_Count:0], breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)" main = "Histogram of waiting times")
hist(c(Body_Count:0], breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)" main = "Histogram of waiting times")
hist(c(Body_Count:0], breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)" main = "Histogram of waiting times")
hist(c(Body_Count:0), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)" main = "Histogram of waiting times")
hist(c(Body_Count:0), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(c(tytul_filmu$Body_Count:0), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(c(filmdeathcounts$Body_Count[1]:0), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(c(filmdeathcounts$Body_Count:0), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(filmdeathcounts$Body_Count, breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
hist(c(filmdeathcounts$Body_Count), breaks =  tytul_filmu$Body_Count, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
runApp('shinyapps-master/engsoccerbeta')
install.packages("ggplot2")
runApp('shinyapps-master/engsoccerbeta')
install.packages("gridExtra")
runApp('shinyapps-master/engsoccerbeta')
install.packages("engsoccerdata")
install.packages("tidyr")
runApp('shinyapps-master/engsoccerbeta')
runApp('shinyapps-master/engsoccerbeta')
runApp('shinyapps-master/golf')
runApp('shinyapps-master/gamebygame')
install.packages("shinydashboard")
runApp('shinyapps-master/gamebygame')
filmdeathcounts
tytul_filmu
tytul_filmu2 <- filmdeathcounts$Film[5]
tytul_filmu2
filter(filmdeathcounts, tytul_filmu)
filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu)
firstRow <- filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu)
firstRow
secondRow <- filter(filmdeathcounts, filmdeathcounts$Film == tytul_filmu2)
secondRow
porownanie <- c(firstRow, secondRow)
porownanie
porownanie$Film
names(porownanie)
porownanie <- data.frame(firstRow, secondRow)
porownanie
names(porownanie)
porownanie <- data.frame(names(porownanie))
add_row(porownanie, firstRow)
porownanie
plot(100,100)
plot(0:filmdeathcounts$Year)
plot(0:filmdeathcounts$Year[1], 0:filmdeathcounts$Year[2])
plot(0:filmdeathcounts$Year[1], 0:filmdeathcounts$Year[5])
plot(0:filmdeathcounts$Year[1], 0:filmdeathcounts$Body_Count)
plot(0:filmdeathcounts$Yea, 0:filmdeathcounts$Body_Count)
plot(0:filmdeathcounts$Year, 0:filmdeathcounts$Body_Count)
plot(0:filmdeathcounts$Year[1], 0:filmdeathcounts$Body_Count[1])
length(filmdeathcounts$Year)
length(filmdeathcounts$Body_Count)
?plot
plot(3*5,4+1)
a <- c(1,2,3,4)
b <- c(4,3,2,1)
plot(a,b)
lata <- filmdeathcounts$Year
lata
zabici <- filmdeathcounts$Body_Count
zabici
plot(lata, zabici)
filmdeathcounts
plot(2,3, type = h)
plot(2,3, type = "h")
plot(filmdeathcounts$Body_Count, filmdeathcounts$Year, type = "h")
# Define UI for app that draws a histogram ----
uiApp <- fluidPage(
# App title ----
titlePanel("Liczba zabitych w filmach"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select for the film  ----
selectInput(inputId = "film1",
label = "Tytuł filmu pierwszego:",
choices = filmdeathcounts$Film),
#Input: Select second film ----
selectInput(inputId = "film2",
label = "Tytuł filmu do porownania:",
choices = colnames(filmdeathcounts$Film))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp('PorownywanieFilmow/serverFilm.R')
filmdeathcounts$Film- tytul_filmu
filter(filmdeathcounts$Film, filmdeathcounts$Film != tytul_filmu)
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
install.packages("shinyjs")
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
pp <- ggplot(
mpg,
aes(y$year,
y$Body_Count,
color=factor(3)
)
) +
geom_point()
pp
pp <- ggplot(
mpg,
aes(filmdeathcounts$Year,
filmdeathcounts$Body_Count,
color=factor(3)
)
) +
geom_point()
pp
diam <- zadanie <- ggplot(
diamonds,
aes(depth, color=factor(cut)
)
) + facet_wrap(~cut) +
geom_histogram(binwidth = 0.2, breaks = 55:70)
diam
diamonds
summarise(filmdeathcounts)
filmdeathcounts
names(filmdeathcounts)
filmy_gg <- ggplot(
filmdeathcounts,
aes(Body_Count, color=factor(IMDB_Rating)
)
) + facet_wrap(~IMDB_Rating) +
geom_histogram(binwidth = 0.2, breaks = 55:70)
filmy_gg
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
zadanie <- ggplot(
diamonds,
aes(depth, color=factor(cut)
)
) facet_wrap(~cut)
geom_histogram(binwidth = 0.2, breaks = 55:70)
zadanie <- ggplot(
diamonds,
aes(depth, color=factor(cut)
)
) facet_wrap(~cut)
geom_histogram(binwidth = 0.2, breaks = 55:70)
zadanie <- ggplot(
diamonds,
aes(depth, color=factor(cut)
)
) + facet_wrap(~cut) +
geom_histogram(binwidth = 0.2, breaks = 55:70)
zadanie
zadanie <- ggplot(
filmdeathcounts,
aes(Body_Counts), color=factor(IMDB_Rating)
)
) + facet_wrap(~IMDB_Rating) +
geom_histogram(binwidth = 0.2, breaks = 55:70)
zadanie <- ggplot(
filmdeathcounts,
aes(Body_Counts), color=factor(IMDB_Rating)
) ) + facet_wrap(~IMDB_Rating) +
geom_map()
zadanie <- ggplot(
filmdeathcounts,
aes(Body_Counts), color=factor(IMDB_Rating)
) ) + facet_wrap(~IMDB_Rating)
zadanie <- ggplot(filmdeathcounts,
aes(Body_Counts), color=factor(IMDB_Rating))
+ facet_wrap(~IMDB_Rating)
zadanie <- ggplot(filmdeathcounts,
aes(Body_Counts), color=factor(IMDB_Rating))
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count), color=factor(IMDB_Rating))
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, YEAR), color=factor(IMDB_Rating))
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year), color=factor(IMDB_Rating))
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year), color=factor(IMDB_Rating))
+ geom_line()
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year), color=factor(IMDB_Rating))
+ geom_point()
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating))
+ geom_point()
zadanie
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating))
+ geom_line()
zadanie
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating)))
+ geom_line()
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating)))
+ geom_line()
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating))) + geom_line()
zadanie
zadanie <- ggplot(filmdeathcounts,
aes(Body_Count, Year, color=factor(IMDB_Rating))) + geom_point()
zadanie
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
s
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
library(shiny); runApp('PorownywanieFilmow/serverFilm.R')
runApp('PorownywanieFilmow/serverFilm.R')
runApp('movies-master')
install.packages("ggvis")
install.packages("ggvis")
install.packages("RSQLite")
runApp('movies-master')
dataTableOutput(head(elektrownie));
library(shiny)
dataTableOutput(head(elektrownie));
elektrownie <- read.csv("elektrownie.csv")
dataTableOutput(head(elektrownie));
fluidRow(
column(12,
dataTableOutput(head(elektrownie)))
);
elektrownie <- read.csv("elektrownie.csv")
elektrownie
elektrownie <- as.data.frame("elektrownie.csv")
head(elektrownie)
elektrownie <- as.data.frame(read.csv("elektrownie.csv"))
head(elektrownie)
install.packages("caret")
library(caret)
elektrownie
library(dplyr)
c <- filter(elektrownie, elektrownie$lat = 0)
c <- filter(elektrownie, elektrownie$lat = '0')
c <- filter(elektrownie, elektrownie$lat == '0')
c
c <- is.na(elektrownie$lat)
c
c <- filter(elektrownie$lat, 0)
c <- filter(elektrownie$lat, elektrownie$lat ==  0)
c <- filter(elektrownie, elektrownie$lat ==  0)
c
c <- filter(elektrownie, elektrownie$anno > 3)
c
c <- filter(elektrownie, elektrownie$irr_pvgis_mod == 0)
c
length(elektrownie)
nrow(elektrownie)
ncol(elektrownie)
summary(elektrownie)
attributes(elektrownie);
library(plotly)
library(dplyr)
library(caret)
head(elektrownie)
elektroeniw_wykr <- elektrownie[!(apply(x, 1, function(y) any(y == 0))),]
elektroeniw_wykr <- elektrownie[!(apply(elektrownie, 1, function(y) any(y == 0))),]
elektroeniw_wykr
length(elektrownie)
nrow(elektrownie)
row_sub = apply(elektrownie, 1, function(row) all(row !=0 ))
elektroeniw_wykr <- elektrownie[row_sub,]
elektroeniw_wykr
ncol(elektroeniw_wykr)
elektroenie_wykr <- elektrownie[apply(elektrownie[c(5:50)],1,function(z) !any(z==0)),]
nrow(elektroenie_wykr)
elektroenie_wykr <- elektrownie[apply(elektrownie[c(5:50)],1,function(z) !any(z==0.000)),]
nrow(elektroenie_wykr)
elektroenie_wykr <- elektrownie[-apply(elektrownie[c(5:50)],1,function(z) !any(z==0.000)),]
nrow(elektroenie_wykr)
elektroenie_wykr <- elektrownie[, !apply(elektrownie == 0, 2, all)]
nrow(elektroenie_wykr)
elektroenie_wykr <- elektrownie[, !apply(elektrownie == 0, all)]
elektroenie_wykr <- elektrownie[, !apply(elektrownie == 0, function(z),all)]
elektroenie_wykr <- elektrownie[, !apply(elektrownie == 0, function(z), all)]
elektroenie_wykr <- filter(elektrownie, pressure != 0)
elektroenie_wykr
nrow(elektroenie_wykr$pressure)
head(elektroenie_wykr)
elektroenie_wykr <- filter(elektrownie, irr_pvgis_mod != 0)  %>% filter(elektrownie, pressurei != 0)
elektroenie_wykr <- filter(elektrownie, irr_pvgis_mod != 0)
elektroenie_wykr <- %>% filter(elektrownie, pressurei != 0)
elektroenie_wykr <- filter(elektrownie, pressurei != 0)
nrow(elektroenie_wykr)
names(elektroenie_wykr)
?p
p?
;
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth / atitude)
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth / attitude)
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth)
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth, title("Umiejscowienie geograficzne w czasie"))
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth, label = "Umiejscowienie geograficzne w czasie")
p
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth, names("Umiejscowienie geograficzne w czasie"))
p
plot_ly?
plot_ly?
;
?plot_ly
p <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth, name = 'Umiejscowienie geograficzne w czasie')
p
azimuth_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~azimuth, name = 'Umiejscowienie geograficzne w czasie')
pressure_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~pressure, name = 'Cisnienie w czasie')
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, xlab('Data'), ylab('Wilgotnosc'), name = 'Wilgotnosc w czasie')
wilgotnosc_plot
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, xlab = 'Data', ylab = 'Wilgotnosc', name = 'Wilgotnosc w czasie')
wilgotnosc_plot
library(ggplot2)
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, xlab = 'Data', ylab = 'Wilgotnosc', name = 'Wilgotnosc w czasie')
wilgotnosc_plot
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, xlab( 'Data' ), ylab ('Wilgotnosc'), name = 'Wilgotnosc w czasie')
wilgotnosc_plot
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, xaxis( 'Data' ), yaxis ('Wilgotnosc'), name = 'Wilgotnosc w czasie')
wilgotnosc_plot <- plot_ly(elektroenie_wykr, x = ~data, y = ~humidity, name = 'Wilgotnosc w czasie')
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "scatter", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "line", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "linear", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "heatmap", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "contour", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "histogram", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "pie", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "box", name = 'Temperatura w czasie')
temp_wylr
temp_wylr <-plot_ly(elektroenie_wykr, x = ~data, y = ~tempi, type = "scatter", name = 'Temperatura w czasie')
temp_wylr
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Energia'),
yaxis = list(title = 'Data'),
zaxis = list(title = 'Odleglosc')),
)
p <- plot_ly(mtcars, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth_plot, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth_plot, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Energia'),
yaxis = list(title = 'Data'),
zaxis = list(title = 'Odleglosc')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Energia',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth_plot, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Energia'),
yaxis = list(title = 'Data'),
zaxis = list(title = 'Odleglosc')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Energia',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
?annotations
?layout
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth_plot, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Energia'),
yaxis = list(title = 'Data'),
zaxis = list(title = 'Odleglosc')),
annotations = list(
y = 'date',
text = 'Energia',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
p
p <- plot_ly(elektroenie_wykr, x = ~kwh, y = ~data, z = ~dist,
marker = list(color = ~azimuth, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Energia'),
yaxis = list(title = 'Data'),
zaxis = list(title = 'Odleglosc')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Energia',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
